// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `order/order_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Order {
    // message fields
    pub order_id: u64,
    pub order_no: ::std::string::String,
    pub order_type: ::std::string::String,
    pub order_time: i64,
    pub category: ::std::string::String,
    pub order_status: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Order {
    fn default() -> &'a Order {
        <Order as ::protobuf::Message>::default_instance()
    }
}

impl Order {
    pub fn new() -> Order {
        ::std::default::Default::default()
    }

    // uint64 order_id = 1;


    pub fn get_order_id(&self) -> u64 {
        self.order_id
    }
    pub fn clear_order_id(&mut self) {
        self.order_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_order_id(&mut self, v: u64) {
        self.order_id = v;
    }

    // string order_no = 2;


    pub fn get_order_no(&self) -> &str {
        &self.order_no
    }
    pub fn clear_order_no(&mut self) {
        self.order_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_no(&mut self, v: ::std::string::String) {
        self.order_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_no(&mut self) -> &mut ::std::string::String {
        &mut self.order_no
    }

    // Take field
    pub fn take_order_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_no, ::std::string::String::new())
    }

    // string order_type = 3;


    pub fn get_order_type(&self) -> &str {
        &self.order_type
    }
    pub fn clear_order_type(&mut self) {
        self.order_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_type(&mut self, v: ::std::string::String) {
        self.order_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_type(&mut self) -> &mut ::std::string::String {
        &mut self.order_type
    }

    // Take field
    pub fn take_order_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_type, ::std::string::String::new())
    }

    // int64 order_time = 4;


    pub fn get_order_time(&self) -> i64 {
        self.order_time
    }
    pub fn clear_order_time(&mut self) {
        self.order_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_order_time(&mut self, v: i64) {
        self.order_time = v;
    }

    // string category = 5;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // int32 order_status = 6;


    pub fn get_order_status(&self) -> i32 {
        self.order_status
    }
    pub fn clear_order_status(&mut self) {
        self.order_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_order_status(&mut self, v: i32) {
        self.order_status = v;
    }
}

impl ::protobuf::Message for Order {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.order_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_no)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_type)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.order_time = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.order_status = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.order_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.order_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.order_no.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.order_no);
        }
        if !self.order_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.order_type);
        }
        if self.order_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.order_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.category);
        }
        if self.order_status != 0 {
            my_size += ::protobuf::rt::value_size(6, self.order_status, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.order_id != 0 {
            os.write_uint64(1, self.order_id)?;
        }
        if !self.order_no.is_empty() {
            os.write_string(2, &self.order_no)?;
        }
        if !self.order_type.is_empty() {
            os.write_string(3, &self.order_type)?;
        }
        if self.order_time != 0 {
            os.write_int64(4, self.order_time)?;
        }
        if !self.category.is_empty() {
            os.write_string(5, &self.category)?;
        }
        if self.order_status != 0 {
            os.write_int32(6, self.order_status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Order {
        Order::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "order_id",
                |m: &Order| { &m.order_id },
                |m: &mut Order| { &mut m.order_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_no",
                |m: &Order| { &m.order_no },
                |m: &mut Order| { &mut m.order_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_type",
                |m: &Order| { &m.order_type },
                |m: &mut Order| { &mut m.order_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "order_time",
                |m: &Order| { &m.order_time },
                |m: &mut Order| { &mut m.order_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &Order| { &m.category },
                |m: &mut Order| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "order_status",
                |m: &Order| { &m.order_status },
                |m: &mut Order| { &mut m.order_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Order>(
                "Order",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Order {
        static instance: ::protobuf::rt::LazyV2<Order> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Order::new)
    }
}

impl ::protobuf::Clear for Order {
    fn clear(&mut self) {
        self.order_id = 0;
        self.order_no.clear();
        self.order_type.clear();
        self.order_time = 0;
        self.category.clear();
        self.order_status = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Order {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Order {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CaptureRequest {
    // message fields
    pub order_no: ::std::string::String,
    pub order_type: ::std::string::String,
    pub category: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CaptureRequest {
    fn default() -> &'a CaptureRequest {
        <CaptureRequest as ::protobuf::Message>::default_instance()
    }
}

impl CaptureRequest {
    pub fn new() -> CaptureRequest {
        ::std::default::Default::default()
    }

    // string order_no = 1;


    pub fn get_order_no(&self) -> &str {
        &self.order_no
    }
    pub fn clear_order_no(&mut self) {
        self.order_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_no(&mut self, v: ::std::string::String) {
        self.order_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_no(&mut self) -> &mut ::std::string::String {
        &mut self.order_no
    }

    // Take field
    pub fn take_order_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_no, ::std::string::String::new())
    }

    // string order_type = 2;


    pub fn get_order_type(&self) -> &str {
        &self.order_type
    }
    pub fn clear_order_type(&mut self) {
        self.order_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_type(&mut self, v: ::std::string::String) {
        self.order_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_type(&mut self) -> &mut ::std::string::String {
        &mut self.order_type
    }

    // Take field
    pub fn take_order_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_type, ::std::string::String::new())
    }

    // string category = 3;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CaptureRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_no)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.order_no.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.order_no);
        }
        if !self.order_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.order_type);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.category);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.order_no.is_empty() {
            os.write_string(1, &self.order_no)?;
        }
        if !self.order_type.is_empty() {
            os.write_string(2, &self.order_type)?;
        }
        if !self.category.is_empty() {
            os.write_string(3, &self.category)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CaptureRequest {
        CaptureRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_no",
                |m: &CaptureRequest| { &m.order_no },
                |m: &mut CaptureRequest| { &mut m.order_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_type",
                |m: &CaptureRequest| { &m.order_type },
                |m: &mut CaptureRequest| { &mut m.order_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &CaptureRequest| { &m.category },
                |m: &mut CaptureRequest| { &mut m.category },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CaptureRequest>(
                "CaptureRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CaptureRequest {
        static instance: ::protobuf::rt::LazyV2<CaptureRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CaptureRequest::new)
    }
}

impl ::protobuf::Clear for CaptureRequest {
    fn clear(&mut self) {
        self.order_no.clear();
        self.order_type.clear();
        self.category.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CaptureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CaptureResponse {
    // message fields
    pub order: ::protobuf::SingularPtrField<Order>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CaptureResponse {
    fn default() -> &'a CaptureResponse {
        <CaptureResponse as ::protobuf::Message>::default_instance()
    }
}

impl CaptureResponse {
    pub fn new() -> CaptureResponse {
        ::std::default::Default::default()
    }

    // .order.v1.Order order = 1;


    pub fn get_order(&self) -> &Order {
        self.order.as_ref().unwrap_or_else(|| <Order as ::protobuf::Message>::default_instance())
    }
    pub fn clear_order(&mut self) {
        self.order.clear();
    }

    pub fn has_order(&self) -> bool {
        self.order.is_some()
    }

    // Param is passed by value, moved
    pub fn set_order(&mut self, v: Order) {
        self.order = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order(&mut self) -> &mut Order {
        if self.order.is_none() {
            self.order.set_default();
        }
        self.order.as_mut().unwrap()
    }

    // Take field
    pub fn take_order(&mut self) -> Order {
        self.order.take().unwrap_or_else(|| Order::new())
    }
}

impl ::protobuf::Message for CaptureResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.order {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.order)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.order.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.order.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CaptureResponse {
        CaptureResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Order>>(
                "order",
                |m: &CaptureResponse| { &m.order },
                |m: &mut CaptureResponse| { &mut m.order },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CaptureResponse>(
                "CaptureResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CaptureResponse {
        static instance: ::protobuf::rt::LazyV2<CaptureResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CaptureResponse::new)
    }
}

impl ::protobuf::Clear for CaptureResponse {
    fn clear(&mut self) {
        self.order.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CaptureResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19order/order_service.proto\x12\x08order.v1\"\xba\x01\n\x05Order\x12\
    \x19\n\x08order_id\x18\x01\x20\x01(\x04R\x07orderId\x12\x19\n\x08order_n\
    o\x18\x02\x20\x01(\tR\x07orderNo\x12\x1d\n\norder_type\x18\x03\x20\x01(\
    \tR\torderType\x12\x1d\n\norder_time\x18\x04\x20\x01(\x03R\torderTime\
    \x12\x1a\n\x08category\x18\x05\x20\x01(\tR\x08category\x12!\n\x0corder_s\
    tatus\x18\x06\x20\x01(\x05R\x0borderStatus\"f\n\x0eCaptureRequest\x12\
    \x19\n\x08order_no\x18\x01\x20\x01(\tR\x07orderNo\x12\x1d\n\norder_type\
    \x18\x02\x20\x01(\tR\torderType\x12\x1a\n\x08category\x18\x03\x20\x01(\t\
    R\x08category\"8\n\x0fCaptureResponse\x12%\n\x05order\x18\x01\x20\x01(\
    \x0b2\x0f.order.v1.OrderR\x05order2N\n\x0cOrderService\x12>\n\x07Capture\
    \x12\x18.order.v1.CaptureRequest\x1a\x19.order.v1.CaptureResponseb\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
